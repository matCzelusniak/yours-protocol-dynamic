
/**
 * A single token's metadata. An extension of the ERC1155 Metadata standard.
 * 
 * Incomining should be used as operation input since map<text, gtv> is not serializable
 * without losing the name of the nested properties.
 */
struct token_metadata_incoming {
  name;
  properties: json;
  yours: yours_metadata;
  // decimals: integer?; // TODO: Add decimals
  description: text?;
  image: text?;
  animation_url: text?;
  // localization: localization?; // TODO: Add localization
}

/**
 * A single token's metadata. An extension of the ERC1155 Metadata standard.
 * 
 * Outgoing should be used as query output in order to preserve the name of the nested properties.
 */
struct token_metadata_outgoing {
  name;
  properties: map<text, gtv>;
  yours: yours_metadata;
  // decimals: integer?; // TODO: Add decimals
  description: text?;
  image: text?;
  animation_url: text?;
  // localization: localization?; // TODO: Add localization
}

/**
 * Yours specific metadata.
 */
struct yours_metadata {
  modules: list<name>;
  project: name;
  collection: name;
}

/**
 * A single attribute of a token. Compatible with ERC721 OpenSea standard.
 */
struct token_attribute {
  trait_type: text;
  value: gtv;
}

/**
 * Get the metadata for a specific token. This function will gather metadata from the token's base metadata,
 * as well as the token's modules on this chain that supports it.
 *
 * @param token The token to get the metadata for.
 */
// function get_metadata(token): token_metadata_outgoing {
//   val base_metadata = imported_attributes @? {
//     token
//   } ( _json_to_gtv_map ($.json) ) ?: map<text, gtv>();
//   val metadata = populate_metadata(token, set(token_module @* { token } ( .module_name ))) ?: map<text, gtv>();

//   base_metadata.put_all(metadata);

//   return token_metadata_outgoing(
//     name = token.name,
//     properties = base_metadata,
//     yours = yours_metadata(
//       collection = token.collection.name,
//       project = token.collection.project.name,
//       modules = token_module @* { token } ( .module_name ),
//     ),
//     description = token_description @? { token } ( .text ),
//     image = token_image @? { token } ( .url ),
//     animation_url = token_animation @? { token } ( .url )
//   );
// }
