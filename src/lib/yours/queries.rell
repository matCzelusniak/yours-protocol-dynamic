
/**
 * Returns the metadata of all modules the token has been used within.
 *
 * @param token_id of the token to get the metadata for
 * @returns The metadata of the token in JSON format in order to handle generic attributes values.
 */
query metadata(project: name, collection: name, token_id: integer): token_metadata_outgoing? {
  val token = get_active_token(project, collection, token_id);
  return if (token != null) get_metadata(token) else null;
}

query balance(account_id: byte_array, project: name, collection: name, token_id: integer): integer {
  val token = get_active_token(project, collection, token_id);
  if (token == null) return 0;

  val account = ft4.accounts.account @? { account_id };
  if (account == null) return 0;

  return get_balance(token, account);
}

struct attribute_values {
  id: byte_array;
  name: name;
  value: byte_array;
  type: attribute_type;
}

// matCzelusniak - research about generic attribute values and types return;
query get_attribute_for_token_name(token_name: text, attribute_name: text): list<attribute_values> {
  return attribute @* {
      .token.asset.name == token_name,
      .name == attribute_name,
  } (
    attribute_values(
      id = $.token.asset.id,
      name = $.token.asset.name,
      value = .value,
      type = .type
    )
  );
}