@extend(yours.populate_metadata)
function populate_metadata(yours.token, modules: set<name>) {
  if (not modules.contains("equippables")) return null;
  val metadata = map<text, gtv>();

  val equippable = equippable @? { token };
  if (equippable == null) return null;

  val slots = occupying_slot @* { .equippable.token == token } ( .name );
  if (not slots.empty()) {
    metadata.put("slots", slots.to_gtv());
  }

  return metadata;
}

@extend(yours.after_apply_transfer)
function after_apply_transfer(yours.token, modules: set<name>,attributes: map<text, gtv>) {
  if (not modules.contains("equippables")) return;

  val equippable = equippable @? { token } ?: create equippable(token);
  val slots = list<name>.from_gtv(attributes.get("slots"));
  for (slot in slots) {
    val occupying_slot = occupying_slot @? { equippable, slot } ?: create occupying_slot(equippable, slot);
  }
}