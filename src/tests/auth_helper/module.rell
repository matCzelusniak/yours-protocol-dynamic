@test module;

import lib.ft4.accounts;
import lib.ft4.external.accounts.strategies.{ register_account };
import lib.ft4.test.utils.{ ft_auth_operation_for, create_auth_descriptor };
import lib.ft4.accounts.strategies.open.{ ras_open };

struct account_data {
  accounts.account;
  auth_descriptor_id: byte_array;
  rell.test.keypair;
}

function create_test_account(rell.test.keypair, permissions: list<text> = ["A", "T"]): account_data {
  val auth_descriptor = create_auth_descriptor(keypair.pub, permissions);
  val auth_descriptor_id = auth_descriptor.hash();

  create_test_account_with_auth_descriptor(auth_descriptor, keypair);
  val account = accounts.account @ { .id == keypair.pub.hash() };

  return account_data(
    account = account,
    auth_descriptor_id = auth_descriptor_id,
    keypair = keypair
  );
}

function create_test_account_with_auth_descriptor(
  accounts.auth_descriptor,
  user_keypair: rell.test.keypair
) {
  rell.test.block().run(); // build genesis block to be able to use op_context.last_block_time afterwards
  
  rell.test
    .tx()
    .op(ras_open(auth_descriptor))
    .op(register_account())
    .sign(user_keypair)
    .run();
}

function auth_op(rell.test.keypair) {
  return ft_auth_operation_for(keypair.pub);
}