
function equip_fishing_rod(avatar_id: byte_array, fishing_rod_id: byte_array) {
  val avatar = yours.token @ { .asset.id == avatar_id };
  val fishing_rod = yours.token @ { .asset.id == fishing_rod_id };
  create equipped_fishing_rod ( avatar, fishing_rod );
}

function unequip_fishing_rod(avatar_id: byte_array) {
  delete equipped_fishing_rod @ { .avatar.asset.id == avatar_id };
}

function pull_fish(avatar_id: byte_array) {
  val avatar = yours.token @ { .asset.id == avatar_id };
  val fishes_caught_attribute = yours.attribute @ { .token.asset.id == avatar_id, .name == "fishes_caught" };
  update fishes_caught_attribute ( (big_integer.from_bytes(fishes_caught_attribute.value) + 1).to_bytes() );

  val fishing_rod = equipped_fishing_rod @ { .avatar.asset.id == avatar_id } ( .fishing_rod );
  val fishing_rod_durability_attribute = 
    yours.attribute @ { .token.asset.id == fishing_rod.asset.id, .name == "durability" };

  update fishing_rod_durability_attribute ( 
    (big_integer.from_bytes(fishing_rod_durability_attribute.value) - 1).to_bytes() 
  );
}