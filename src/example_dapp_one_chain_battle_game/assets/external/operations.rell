//todo matCzelusniak. It's centrallized app with possibility to set interface
operation set_current_version_of_hero_interface_id(
  id: big_integer
) {
  ft_admin.require_admin();
  require(
    originals_light.interface @? {.id == id}, 
    "Interface with given id does not exist."
  );
  assets.config.hero_interface_id = id;
}

operation set_current_version_of_battle_arena_interface_id(
  id: big_integer
) {
  ft_admin.require_admin();
  require(
    originals_light.interface @? {.id == id}, 
    "Interface with given id does not exist."
  );
  assets.config.battle_arena_interface_id = id;
}

operation set_current_version_of_battle_interface_id(
  id: big_integer
) {
  ft_admin.require_admin();
  require(
    originals_light.interface @? {.id == id}, 
    "Interface with given id does not exist."
  );
  assets.config.battle_interface_id = id;
}

// simple registration without auth descriptors for test purposes
// todo matCzelusniak - add support for registration with ft4 functions.
operation register_account (
  account_id: byte_array,
  name: text
) {
  create ft_accounts.account(
    id = account_id, 
    name
  );
}

operation register_and_mint_asset_hero(
  name: text,
  symbol: text,
  decimals: integer,
  blockchain_rid: byte_array,
  icon_url: text,
  attributes: list<(
    attribute_name: text,
    type: originals_light.attribute_type,
    attribute_value: byte_array
  )>
) {
  // every user of daap can register asset hero 
  // for example after pay for it
  val account = ft_auth.authenticate();
  originals_light.require_interface_compatibility(
    attributes,
    originals_light.interface @ { .id == assets.config.hero_interface_id }
  );

  val asset = originals_light.register_asset(
    name,
    symbol,
    decimals,
    blockchain_rid,
    icon_url,
    ft_assets.ASSET_TYPE_FT4,
    attributes
  );

  originals_light.mint_asset(
    asset.id,
    1,
    [account.id]
  );
}


//todo matCzelusniak add flag that user with flag 'ADMIN' can register battle arena
operation register_and_mint_asset_battle_arena(
  name: text,
  symbol: text,
  decimals: integer,
  blockchain_rid: byte_array,
  icon_url: text,
  attributes: list<(
    attribute_name: text,
    type: originals_light.attribute_type,
    attribute_value: byte_array
  )>
) {
  // every user of daap can register asset battle arena 
  // for example after pay for it
  val account = ft_auth.authenticate();
  originals_light.require_interface_compatibility(
    attributes,
    originals_light.interface @ { .id == assets.config.battle_arena_interface_id }
  );

  val asset = originals_light.register_asset(
    name,
    symbol,
    decimals,
    blockchain_rid,
    icon_url,
    ft_assets.ASSET_TYPE_FT4,
    attributes
  );

  originals_light.mint_asset(
    asset.id,
    1,
    [account.id]
  );
}

//keep every battle as nft
operation register_and_mint_asset_battle(
  name: text,
  symbol: text,
  decimals: integer,
  blockchain_rid: byte_array,
  icon_url: text,
  attributes: list<(
    attribute_name: text,
    type: originals_light.attribute_type,
    attribute_value: byte_array
  )>
) {
  // every user of daap can register asset battle 
  // for example after pay for it
  val account = ft_auth.authenticate();
  originals_light.require_interface_compatibility(
    attributes,
    originals_light.interface @ { .id == assets.config.battle_interface_id }
  );

  val asset = originals_light.register_asset(
    name,
    symbol,
    decimals,
    blockchain_rid,
    icon_url,
    ft_assets.ASSET_TYPE_FT4,
    attributes
  );

  originals_light.mint_asset(
    asset.id,
    1,
    [account.id]
  );
}